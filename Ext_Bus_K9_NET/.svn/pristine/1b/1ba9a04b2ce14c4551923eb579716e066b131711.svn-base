/**
 *图层列表
 *
 */
//全局变量
var mapUrlCfg = new top.IMSMapConfig();
var tree;
var urls = {
    'showLayerTree' : 'Maps.ashx?_method=GetMapLayerList&mapType='+mapUrlCfg.mapType,
    'setLayerStatus': 'Maps.ashx'
}


function MLayerTree(){
    var tree;
    var ctx;
    var selectedNode;
    refreshTree = function(){
        tree.body.mask('加载图层中...', 'x-mask-loading');
        tree.root.reload();
        tree.root.collapse(true, true);
        setTimeout(function(){
            tree.body.unmask();
            tree.root.expand(true, true);
        }, 1000);
    }
    setEditable = function(node, event){
        var parentnode = node.parentNode;
        var treeEl = parentnode.getUI().getEl();
        var leafEl = node.getUI().getEl();
        var leaves = treeEl.getElementsByTagName("div");
        var index = parentnode.indexOf(node);
        for (var i = 1; i < leaves.length; i++) {
            var leaf = Ext.get(leaves[i]);
            if (i == (index + 1)) {
                replaceIcon(leaf, "editable")
                continue;
            }
            if (leaf.hasClass("editable")) 
                leaf.replaceClass("editable", "visible");
            if (leaf.hasClass("selectable")) 
                leaf.replaceClass("selectable", "visible");
        }
    }
    showCtx = function(node, event){
        node.select();
        selectedNode = node;
        createContextMenu();
        ctx.showAt(event.getXY());
    }
    changeLayerStatus = function(status){
        changeStatus(selectedNode, status);
    }
    changeStatus = function(node, status){
        var leafEl = node.getUI().getEl();
        var leaves = leafEl.getElementsByTagName("div");
        var leaf = Ext.get(leaves[0]);
        replaceIcon(leaf, status)
    }
    changeGridStatus=function(node, event)
    {
        var leafEl = node.getUI().getEl();
        var leaves = leafEl.getElementsByTagName("div");
        var leaf = Ext.get(leaves[0]);
        if (leaf.hasClass("visible")) 
            leaf.replaceClass("visible", "hidden");
        else
            leaf.replaceClass("hidden", "visible");
        changeGridView(leaf,node.id);
    }
    changeGridView=function(leaf,id)
    {
        var id = id.split("layer");
        var index = id[1];
        if (leaf.hasClass("visible")) 
        {
            top.map.openGridLayer(index,mapUrlCfg.gridImageUrl[index]);
        }
        else
        {
            top.map.closeGridLayer(index);
        }
    }
    getLayerIcon = function(leaf){
        if (leaf.hasClass("visible")) 
            return "visible";
        if (leaf.hasClass("selectable")) 
            return "selectable";
        if (leaf.hasClass("editable")) 
            return "editable";
        else 
            return "hidden";
    }
    replaceIcon = function(leaf, status){
        leaf.replaceClass(getLayerIcon(leaf), status);
    }
    hiddenLayer = function(){
        changeLayerStatus("hidden");
    }
    
    setLayerVisible = function(){
        changeLayerStatus("visible");
    }
    setLayerSelectable = function(){
        changeLayerStatus("selectable");
    }
    setLayerEditable = function(){
        setEditable(selectedNode, '');
    }
    changeAll = function(status){
        var root = tree.getRootNode();
        var folder = root.childNodes;
        var nodes = folder[folder.length-1].childNodes;
        for (var i = 0; i < nodes.length; i++) {
            changeStatus(nodes[i], status);
        }
    }
    hideAll = function(){
        changeAll("hidden");
    }
    showAll = function(){
        changeAll("visible");
    }
    activeAll = function(){
        changeAll("selectable");
    }
    submitLayerStatus = function(){
        var root = tree.getRootNode();
        var folder = root.childNodes;
        var nodes = folder[folder.length-1].childNodes;
        var params = '_method=UpdateMap';
        for (var i = 0; i < nodes.length; i++) {
            var leafEl = nodes[i].getUI().getEl();
            var leaves = leafEl.getElementsByTagName("div");
            var leaf = Ext.get(leaves[0]);
            params += "&" + nodes[i].id + "=" + getLayerIcon(leaf);
        }
        tree.body.mask('图层状态提交中...', 'x-mask-loading');
        Ext.Ajax.request({
            url: urls['setLayerStatus'],
            success: function(response){
                //top.map.setCurOper(top.IMSOperType.Refresh);
                tree.body.unmask();
            },
            failure: function(response){
                alert("提交图层出错，请确认GIS服务器是否存在！");
                tree.body.unmask();
            },
            params: params
        });
    }
   
    // 创建上下文菜单   
   var createContextMenu = function(){
		if(ctx)
		    return;
		ctx = new Ext.menu.Menu({
			id:'layerCtx',
			items:[{
				text:'隐藏',
				scope:this,
				iconCls:'hidden_m',
				handler:hiddenLayer
			},'-',{
				text:'可见',
				scope:this,
				iconCls:'visible_m',
				handler:setLayerVisible
			},'-',{
				text:'可查询',
				scope:this,
				iconCls:'selectable_m',
				handler:setLayerSelectable
			},'-',{
				text:'可编辑',
				scope:this,
				iconCls:'editable_m',
				handler:setLayerEditable
			}]
		});
	};
    
    tree = new Ext.tree.TreePanel({
        root: new Ext.tree.AsyncTreeNode({
            expanded: true,
            text: 'tree',
            allowDrag:false,
            allowDrop:false
        }),
        renderTo:'layerTree',
        id: 'layerTree2',
        height : '100%',
        iconCls: 'nav',
        animate: true,
        //title: '图层列表',
        loader: new Ext.tree.TreeLoader({
            requestMethod :"GET",
            dataUrl: urls['showLayerTree'],
            listeners:{
                "load":function(o, node, response){
                if(response.responseText.indexOf("showCtx")==-1)    
                    tree.getBottomToolbar().hide();
                }
            }
        }),
		
        enableDD: true,
        rootVisible: false,
        autoScroll: true,
        //tools: [{
        //    id: 'refresh',
        //    qtip:'<span>刷新图层列表</span>',
        //    on: {
        //        click: refreshTree
        //    }
        //}],
        bbar: [{
            icon: 'icons/hideAll.gif',
            minWidth: 35,
            cls: 'x-btn-icon',
            tooltip: '<span>隐藏全部图层</span>',
            handler: hideAll
        }, '-', {
            icon: 'icons/showAll.gif',
            minWidth: 35,
            cls: 'x-btn-icon',
            tooltip: '<span>显示全部图层</span>',
            handler: showAll
        }, '-', {
            icon: 'icons/activeAll.gif',
            minWidth: 35,
            cls: 'x-btn-icon',
            tooltip: '<span>查询全部图层</span>',
            handler: activeAll
        /*}, '-', {
            icon: 'images/refresh_s.gif',
            minWidth: 35,
            cls: 'x-btn-icon',
            tooltip:'<span>刷新图层列表</span>',
            handler: refreshTree*/
        }, '-',{
            text: '提交',
            icon: 'icons/list-items.gif',
            cls: 'x-btn-text-icon',
            tooltip: '<span>更新图层状态</span>',
            handler: submitLayerStatus
        }]
    });
    return tree.root.expand(true,true);
}
    Ext.onReady(function(){
        Ext.BLANK_IMAGE_URL = "images/default/s.gif";
        Ext.QuickTips.init();
        tree = new MLayerTree();
    });


